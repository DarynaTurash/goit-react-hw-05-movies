{"version":3,"file":"static/js/10.5cb1fe5c.chunk.js","mappings":"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","sources":["../node_modules/date-fns/esm/constants/index.js","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/_lib/toInteger/index.js","../node_modules/date-fns/esm/parseISO/index.js","../node_modules/date-fns/esm/toDate/index.js","../node_modules/date-fns/esm/getYear/index.js","fetches/fetchMovieDetails.js","components/MainInfoAboutFilm.jsx","components/AdditionalInfoAboutFilm.jsx","pages/MovieDetails.jsx","utils/api.key.js"],"sourcesContent":["/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n\n/**\n * Days in 1 year\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * @name daysInYear\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInYear = 365.2425;\n\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\nexport var millisecondsInMinute = 60000;\n\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\nexport var millisecondsInHour = 3600000;\n\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\nexport var millisecondsInSecond = 1000;\n\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\nexport var minTime = -maxTime;\n\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\nexport var minutesInHour = 60;\n\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\nexport var monthsInQuarter = 3;\n\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\nexport var monthsInYear = 12;\n\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\nexport var quartersInYear = 4;\n\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\nexport var secondsInHour = 3600;\n\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\nexport var secondsInMinute = 60;\n\n/**\n * Seconds in 1 day\n *\n * @name secondsInDay\n * @constant\n * @type {number}\n * @default\n */\nexport var secondsInDay = secondsInHour * 24;\n\n/**\n * Seconds in 1 week\n *\n * @name secondsInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var secondsInWeek = secondsInDay * 7;\n\n/**\n * Seconds in 1 year\n *\n * @name secondsInYear\n * @constant\n * @type {number}\n * @default\n */\nexport var secondsInYear = secondsInDay * daysInYear;\n\n/**\n * Seconds in 1 month\n *\n * @name secondsInMonth\n * @constant\n * @type {number}\n * @default\n */\nexport var secondsInMonth = secondsInYear / 12;\n\n/**\n * Seconds in 1 quarter\n *\n * @name secondsInQuarter\n * @constant\n * @type {number}\n * @default\n */\nexport var secondsInQuarter = secondsInMonth * 3;","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n  var number = Number(dirtyNumber);\n  if (isNaN(number)) {\n    return number;\n  }\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport default function parseISO(argument, options) {\n  var _options$additionalDi;\n  requiredArgs(1, arguments);\n  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n  var dateStrings = splitDateString(argument);\n  var date;\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time);\n    // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n  return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}","import API_KEY from \"utils/api.key\";\nimport axios from 'axios';\nimport { parseISO, getYear } from 'date-fns';\n\nconst fetchMovieDetails = async (movieId) => {\n    try {\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`);\n        const data = response.data;\n\n        const id = data.id;\n        const title = data.title || data.name;\n        const poster = data.poster_path;\n        const releaseDate = parseISO(`${data.release_date}`);\n        const releaseYear = getYear(releaseDate);\n        const overView = data.overview;\n        const genres = data.genres.map(genre => genre.name).join(', ');\n        const userScore = (data.vote_average * 10).toFixed(0);\n\n        return {\n            id,\n            title,\n            poster,\n            releaseYear,\n            overView,\n            genres,\n            userScore\n        };\n\n    } catch(error) {\n        console.log(error);\n    }\n};\n\nexport default fetchMovieDetails;","const MainInfoAboutFilm = ({ poster, title, releaseYear, userScore, overView, genres }) => {\n    return (\n        <>\n            <div>\n                <img src={`https://image.tmdb.org/t/p/original/${poster}`} alt={title} />\n            </div>\n            <div>\n                <h2>{title}({releaseYear})</h2>\n                <p>User score: {userScore}%</p>\n                <h3>Overview</h3>\n                <p>{overView}</p>\n                <h4>Genres</h4>\n                <p>{genres}</p>\n            </div>\n        </>\n    );\n};\n\nexport default MainInfoAboutFilm;","import { Link } from \"react-router-dom\";\n\nconst AdditionalInfoAboutFilm = () => {\n    return (\n        <div>\n            <h3>Additional information</h3>\n            <ul>\n            <li><Link to=\"cast\">Cast</Link></li>\n            <li><Link to=\"reviews\">Reviews</Link></li>\n            </ul>\n        </div>\n    );\n}; \n\nexport default AdditionalInfoAboutFilm;","import fetchMovieDetails from \"fetches/fetchMovieDetails\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useParams, Outlet, useLocation, Link } from \"react-router-dom\";\nimport MainInfoAboutFilm from \"components/MainInfoAboutFilm\";\nimport AdditionalInfoAboutFilm from \"components/AdditionalInfoAboutFilm\";\n\n\n\nconst MovieDetails = () => {\n    const [movieDetails, setMovieDetails] = useState({});\n    const [caseNoInformation, setCaseNoInformation] = useState(false);\n    const { movieId } = useParams();\n    const location = useLocation();\n    const backLinkLocation = useRef(location.state?.from ?? '/');\n    console.log(backLinkLocation);\n\n    useEffect(() => {\n        fetchMovieDetails(movieId)\n            .then(details => {\n                if (!details) {\n                    setCaseNoInformation(true);\n                    setMovieDetails({});\n                } else {\n                    setCaseNoInformation(false);\n                    setMovieDetails(details);\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }, [movieId]);\n\n\n    return (\n        <main>\n            {caseNoInformation ? <p>Sorry, we did not get any information about this film, try to choose another film, please</p> :\n            <>\n            <section>\n                <Link to={backLinkLocation.current}>Go back</Link>\n                <MainInfoAboutFilm poster={movieDetails.poster} title={movieDetails.title} releaseYear={movieDetails.releaseYear} userScore={movieDetails.userScore} overView={movieDetails.overView} genres={movieDetails.genres} />    \n            </section>\n            <section>\n                <AdditionalInfoAboutFilm />\n            </section>\n            <section>\n                <Outlet />\n            </section>\n            </>}\n        </main>\n    );\n};\n\nexport default MovieDetails;","const API_KEY = '7bb2eceb0e28c427492123880ced91c1';\nexport default API_KEY;"],"names":["millisecondsInHour","Math","pow","requiredArgs","required","args","length","TypeError","toInteger","dirtyNumber","NaN","number","Number","isNaN","ceil","floor","parseISO","argument","options","_options$additionalDi","arguments","additionalDigits","RangeError","Object","prototype","toString","call","Date","date","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","year","getTime","offset","timestamp","time","parseTime","timezone","dirtyDate","result","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseTimezone","patterns","dateTimeDelimiter","timeZoneDelimiter","dateRegex","timeRegex","timezoneRegex","dateString","timeString","array","split","test","substr","token","exec","replace","regex","RegExp","captures","match","parseInt","century","slice","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","value","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","timezoneString","sign","_hours","validateTimezone","toDate","argStr","_typeof","console","warn","Error","stack","getYear","getFullYear","fetchMovieDetails","movieId","axios","API_KEY","response","data","id","title","name","poster","poster_path","releaseDate","release_date","releaseYear","overView","overview","genres","map","genre","join","userScore","vote_average","toFixed","log","src","alt","to","useState","movieDetails","setMovieDetails","caseNoInformation","setCaseNoInformation","useParams","location","useLocation","backLinkLocation","useRef","state","from","useEffect","then","details","catch","error","current"],"sourceRoot":""}