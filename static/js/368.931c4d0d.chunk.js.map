{"version":3,"file":"static/js/368.931c4d0d.chunk.js","mappings":"8PAaA,EAXwB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACjBC,GAAWC,EAAAA,EAAAA,MACjB,OACI,0BACI,wBACKF,EAAKG,KAAI,SAACC,GAAD,OAAW,yBAAkB,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAA/C,SAA4DG,EAAKK,gBAAkBL,EAAKM,QAAjGN,EAAKE,GAAzB,OAIzB,E,kBCRKK,EAAqB,mCAAG,WAAOC,GAAP,gGAECC,EAAAA,EAAAA,IAAA,0DAA6DD,EAA7D,oBAAoFE,EAAAA,IAFrF,cAEhBC,EAFgB,yBAGfA,EAASC,KAAKC,SAHC,gCAKtBC,QAAQC,IAAR,MALsB,yDAAH,sDAS3B,ICQA,EAlBkB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAClC,OACI,6BACI,kBACIC,KAAK,OACLC,MAAOJ,EACPE,SAAU,SAAAG,GAAK,OAAIH,EAASG,EAAMC,OAAOF,MAA1B,KAEnB,SAAC,KAAD,CACInB,GAAE,4BAAuBe,GACzBO,QAASN,EAFb,SAGC,aAKZ,E,2BCyCD,EAnDe,WACX,OAAsCO,EAAAA,EAAAA,UAAS,IAA/C,eAAOhB,EAAP,KAAoBiB,EAApB,KACA,GAAwCD,EAAAA,EAAAA,UAAS,IAAjD,eAAOE,EAAP,KAAqBC,EAArB,KACA,GAA4BH,EAAAA,EAAAA,UAAS,QAArC,eAAOI,EAAP,KAAeC,EAAf,KACA,GAAuBC,EAAAA,EAAAA,MACjBC,GADN,eACgCC,IAAI,aAC9BC,GAAWC,EAAAA,EAAAA,MAmCjB,OA5BAC,EAAAA,EAAAA,YAAU,WACN,GAAIJ,EAAY,CACZ,IAAMK,EAAgB,mCAAG,oGAEjBP,EAAU,WAFO,SAIOtB,EAAsBwB,GAJ7B,OAMQ,KAFnBM,EAJW,QAMHC,QACVC,IAAAA,OAAAA,QAAwB,iFACxBV,EAAU,QACVI,EAAS,WACTN,EAAgB,IAChBF,EAAe,MAEfI,EAAU,YACVF,EAAgBU,IAdH,gDAiBjBR,EAAU,YAjBO,yDAAH,qDAqBtBO,IACAX,EAAeM,EAClB,CACJ,GAAE,CAACA,EAAYE,KAGZ,6BACI,SAAC,EAAD,CAAWjB,MAAOR,EAAaS,SAnClB,SAAAI,GACjBA,EAAMmB,iBACNP,EAAS,qBAAD,OAAsBQ,mBAAmBjC,IACpD,EAgC8DU,SAAUO,IACrD,YAAXG,IAAwB,SAACc,EAAA,EAAD,IACb,aAAXd,IAAyB,SAAC,EAAD,CAAiBhC,KAAM8B,IACrC,aAAXE,IAAyB,uBAAG,oDAGxC,C,oBCxDD,IADgB,kC","sources":["components/QueryList.jsx","fetches/fetchSearchQueryFilms.js","components/SearchBox.jsx","pages/Movies.jsx","utils/api.key.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\n\nconst SearchQueryList = ({ list }) => {\n    const location = useLocation();\n    return (\n        <div>\n            <ul>\n                {list.map((film) => (<li key={film.id}><Link to={`/movies/${film.id}`} state={{ from: location }}>{film.original_title || film.name}</Link></li> ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default SearchQueryList;","import API_KEY from \"utils/api.key\";\nimport axios from 'axios';\n\nconst fetchSearchQueryFilms = async (searchQuery) => {\n    try {\n        const response = await axios.get(`https://api.themoviedb.org/3/search/movie?query=${searchQuery}&api_key=${API_KEY}`);\n        return response.data.results;\n    } catch(error) {\n        console.log(error);\n    }\n};\n\nexport default fetchSearchQueryFilms;","import { Link } from \"react-router-dom\";\n\nconst SearchBox = ({ query, onSearch, onChange }) => {\n    return (\n        <form>\n            <input\n                type=\"text\"\n                value={query}\n                onChange={event => onChange(event.target.value)}\n            />\n            <Link\n                to={`/movies?movieName=${query}`}\n                onClick={onSearch}\n            >\n                Search\n            </Link>\n        </form>\n    );\n};\n\nexport default SearchBox;","import { useState, useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport SearchQueryList from \"../components/QueryList\";\nimport fetchSearchQueryFilms from \"fetches/fetchSearchQueryFilms\";\nimport SearchBox from \"../components/SearchBox\";\nimport Notiflix from 'notiflix';\nimport Loader from \"../components/Loader\";\n\nconst Movies = () => {\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [foundedFilms, setFoundedFilms] = useState([]);\n    const [status, setStatus] = useState('idle');\n    const [searchParams] = useSearchParams();\n    const queryParam = searchParams.get('movieName');\n    const navigate = useNavigate();\n\n    const handleSearch = event => {\n        event.preventDefault();\n        navigate(`/movies?movieName=${encodeURIComponent(searchQuery)}`);\n    };\n\n    useEffect(() => {\n        if (queryParam) {\n            const fetchAndSetFilms = async () => {\n                try {\n                    setStatus('pending'); \n    \n                    const dataFilms = await fetchSearchQueryFilms(queryParam);\n                    \n                    if (dataFilms.length === 0) {\n                        Notiflix.Notify.warning('Sorry, there are no matches. Please, check if the title you wrote is correct.');\n                        setStatus('idle');\n                        navigate('/movies');\n                        setFoundedFilms([]);\n                        setSearchQuery('');\n                    } else {\n                        setStatus('resolved');\n                        setFoundedFilms(dataFilms);\n                    }\n                } catch (error) {\n                    setStatus('rejected');\n                }\n            };\n    \n            fetchAndSetFilms();\n            setSearchQuery(queryParam);\n        }\n    }, [queryParam, navigate]);\n\n    return (\n        <main>\n            <SearchBox query={searchQuery} onSearch={handleSearch} onChange={setSearchQuery} />\n            {status === \"pending\" && <Loader />}\n            {status === \"resolved\" && <SearchQueryList list={foundedFilms} />}\n            {status === 'rejected' && <p>Error, something went wrong, please try again</p>}\n        </main>\n    );\n};\n\nexport default Movies;","const API_KEY = '7bb2eceb0e28c427492123880ced91c1';\nexport default API_KEY;"],"names":["list","location","useLocation","map","film","to","id","state","from","original_title","name","fetchSearchQueryFilms","searchQuery","axios","API_KEY","response","data","results","console","log","query","onSearch","onChange","type","value","event","target","onClick","useState","setSearchQuery","foundedFilms","setFoundedFilms","status","setStatus","useSearchParams","queryParam","get","navigate","useNavigate","useEffect","fetchAndSetFilms","dataFilms","length","Notiflix","preventDefault","encodeURIComponent","Loader"],"sourceRoot":""}